---
title: "CAGNATO"
author: "Clara Cagnato"
format: html
---

```{r}
here::i_am("eval-grades1.Rproj")
library(here)
library(vroom)
library(ggplot2)
library(dplyr)
library(tidyr)
theme_set(theme_bw())
```

## Question 1 
data import
```{r}
data <- vroom(here("grades.csv"))
```
## Question 2
Give the number of grades in the data set directly in the text of your quarto file, in a sentence of the form “The data set contains xxx grades.” where xxx is replaced by the number of grades. This must be computed from the data set.
```{r}
data %>% distinct(grade)
nrow(data)
```
In total, we have 64995 grades but only 214 dinstincts.

## Question 3
The dplyr function distinct() can be used to keep only distinct (!) values in a data frame, according to the specified variables. For instance if the data frame df has a variable foo, then gives a new data frame with only the column foo and such that each value of foo appears only once. This applies to multiple variables in a similar way.
Use distinct() compute the number of students on the data set and report the value directly in the text as in the previous question.

```{r}
data %>% distinct(id) %>% nrow()
```
The number of unique student is 959.

## Question 4
Create a students data frame that contains one row per student and two variables, id and group that gives the assignment of each student to their group. Make sure that each student appears on only once in the data frame. Include a short extract of the data frame in the quarto rendering.
```{r}
students <- data %>%
  distinct(id, .keep_all = TRUE) %>% 
  select(id, group) 
head(students)
```

## Question 5
Use a graphical representation to display the number of students per group.
```{r}
students_per_group <- students %>%
  group_by(group) %>%
  summarise(num_students = n())


ggplot(students_per_group, aes(x = group, y = num_students)) +
  geom_bar(stat = "identity") +
  labs(title = "nb of student per group", x = "Group", y = "Nb of students") +
  theme_minimal()
```
## Question 6
Compute the average of all the grades in Astrology and Divination in each group and display graphically this average as a function of the group. It is recommend to use geom_col() for this task (read the documentation!).
```{r}
average_grades <- data %>%
  filter(course == "Astrology and Divination") %>%  
  group_by(group) %>%                               
  summarise(avg_grade = mean(grade, na.rm = TRUE))  

print(average_grades)
```
```{r}
ggplot(average_grades, aes(x = group, y = avg_grade)) +
  geom_col(fill = "gray") + 
  labs(title = "Average Grades by Group",
       x = "Group",
       y = "Average Grade") +
  theme_minimal()
```
## Question 7
Compare graphically the distribution of the grades of the 2 modules.
```{r}
filtered_data <- data %>%
  filter(module %in% c(1, 2))

ggplot(filtered_data, aes(x = factor(module), y = grade)) +
  geom_boxplot(fill = c("lightblue", "lightgreen"), outlier.colour = "red") +  
  labs(
    title = "Distribution des Notes par Module",
    x = "Module",
    y = "Notes"
  ) +
  theme_minimal(base_size = 15) 
```

## Question 8
Compute the number of grades per student and include in your quarto rendering an extract of the resulting data frame. Make sure to keep in the data frame the id of the students but also their group. Include in the text a markdown table with the minimum, maximum, average and median number of grades per student.
```{r}
grades_per_id <- students %>%
  group_by(id) %>%              
  summarise(num_grades = n(), .groups = 'drop')
grades_per_id
```
```{r}
sample <- grades_per_id %>% 
  slice_head(n = 10)
sample
```

```{r}
grades_per_id_group <- students %>%
  group_by(id, group) %>%              
  summarise(num_grades = n(), .groups = 'drop')  
sample_grades <- grades_per_id_group %>% 
  slice_head(n = 10)
library(knitr)
kable(sample_grades)
```

## Question 9
Create a data frame that gives for each student their id, their group and the number of grades they obtained in Architecture and Sculpture and include in the quarto rendering a small extract of the result.
```{r}
grades_architecture <- data %>%
  filter(course == "Architecture and Sculpture") %>%  # Filtrer pour le cours
  distinct(id, group, grade) %>%                       # Garder uniquement les combinaisons uniques d'ID, group et grade
  group_by(id, group) %>%                               # Regrouper par ID et groupe
  summarise(num_grades = n(), .groups = 'drop') 
grades_architecture
sample_architecture_grades <- grades_architecture %>% 
  slice_head(n = 10)
kable(sample_architecture_grades)
```


## Question 10
Compute from the previous data frame the distribution of the number of grades, that is for each number of grades (e.g. 10) the number of students who have exactly this number of grades in Architecture and Sculpture. Represent graphically the results.
```{r}
grades_distribution <- grades_architecture %>%
  group_by(num_grades) %>%         
  summarise(num_students = n(), .groups = 'drop')  


ggplot(grades_distribution, aes(x = num_grades, y = num_students)) +
  geom_bar(stat = "identity") +  
  labs(title = "Distribution of Number of Grades in Architecture and Sculpture",
       x = "Number of Grades",
       y = "Number of Students") +
  theme_minimal()
```

## Question 11
```{r}
ggplot(grades_architecture, aes(x = group, y = num_grades, color = group)) +
  geom_point(size = 3, alpha = 0.7) +  
  labs(title = "Number of Grades in Architecture and Sculpture by Group",
       x = "Group",
       y = "Number of Grades") +
  theme_minimal() +
  theme(legend.position = "none")
```
## Question 12
Create a data frame that gives for each student their id, their group and the average of grades they obtained in each course. Using an adapted pivoting method, create a new data frame with one row per student and 12 columns: one for the id, one for the group and one per course. Include in the quarto rendering a small extract of the data frame with the id and group columns and with two of the course columns. You should obtain something like this:
```{r}
average_grades <- data %>%
  group_by(id, group, course) %>%                 
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = 'drop')  

average_grades_wide <- average_grades %>%
  pivot_wider(names_from = course, values_from = avg_grade, values_fill = NA)  

print(average_grades_wide)
```

```{r}
average_grades <- data %>%
  group_by(id, group, course) %>%  
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = 'drop')  

average_grades_wide <- average_grades %>%
  pivot_wider(names_from = course, values_from = avg_grade, values_fill = NA)  

sample_extract <- average_grades_wide %>%
  select(id, group, `Agriculture and Horticulture`, `Architecture and Sculpture`) %>% 
  slice_head(n = 10)  

print(sample_extract)
```
## Question 13
Show the average grades in Agriculture and Horticulture as a function of the average grades in Language and Linguistics. Make sure to maximise the readability of the proposed representation.
```{r}
average_grades <- data %>%
  group_by(id) %>%
  summarise(
    avg_agriculture = mean(grade[course == "Agriculture and Horticulture"], na.rm = TRUE),
    avg_language = mean(grade[course == "Language and Linguistics"], na.rm = TRUE)
  )


ggplot(average_grades, aes(x = avg_language, y = avg_agriculture)) +
  geom_point(size = 3, alpha = 0.7, color = 'blue') +  
  geom_smooth(method = 'lm', color = 'red', se = FALSE) +  
  labs(
    title = "Average Grades in Agriculture and Horticulture vs Language and Linguistics",
    x = "Average Grades in Language and Linguistics",
    y = "Average Grades in Agriculture and Horticulture"
  ) +
  theme_minimal(base_size = 15) +  
  theme(
    plot.title = element_text(hjust = 0.5, size = 18, face = "bold"),  
    axis.title = element_text(size = 14), 
    axis.text = element_text(size = 12)   
  )
```

## Question 14
The cor() function computes the correlation coeﬀicient between two vectors. It can be used as a summary function in dplyr. Using it, compute the correlation between the average grades in History and Civilization of Southeast Asia and the average grades in Architecture and Sculpture group by group.

```{r}
average_grades <- data %>%
  group_by(id, group) %>%
  summarise(
    avg_history = mean(grade[course == "History and Civilization of Southeast Asia"], na.rm = TRUE),
    avg_architecture = mean(grade[course == "Architecture and Sculpture"], na.rm = TRUE),
    .groups = 'drop'  
  )
average_grades
```
```{r}
correlation_results <- average_grades %>%
  group_by(group) %>%
  summarise(correlation = cor(avg_history, avg_architecture, use = "complete.obs"))
correlation_results
```

## Question 15
Display the average grades in History and Civilization of Southeast Asia as a function the average grades in Architecture and Sculpture for the students of the group in which those grades are the most correlated (positively or negatively).

## Question 16
Let us assume that the final grade of a student is the average of the averages of their grades for each course. Create a data frame with three columns, id, group and final grade based on this definition for the last column. Sort the data frame in decrease order of final grade and include in the quarto rendering its first five rows.
```{r}
course_averages <- data %>%
  group_by(id, group, course) %>%
  summarise(avg_grade = mean(grade, na.rm = TRUE), .groups = 'drop')

final_grades <- course_averages %>%
  group_by(id, group) %>%
  summarise(final_grade = mean(avg_grade, na.rm = TRUE), .groups = 'drop')

newdf <- final_grades %>%
  select(ID = id, group, final_grade)
print(newdf)

newdf %>%
  arrange(desc(final_grade))
```

## Question 17
Find a way to study differences in final grades between groups.
```{r}
ggplot(newdf, aes(x = factor(group), y = final_grade)) +
  geom_boxplot(fill = "lightblue", outlier.color = "red") +
  labs(title = "Distribution des Notes Finales par Groupe",
       x = "Groupe",
       y = "Note Finale") +
  theme_minimal(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
## Question 18
Create a data frame that gives for each student their id, their group, their final grade (as defined before) and a pass variable equal to TRUE if the student pass the year (and FALSE if they do not).



```{r}

```

## Question 19
Compute and display the number of students who do not pass and yet have a final grade larger or equal to 10.
## Question 20
Compute the pass rate per group and represent it graphically.
