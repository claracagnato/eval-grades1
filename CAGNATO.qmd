---
title: "CAGNATO"
author: "Clara Cagnato"
format: html
---

```{r}
here::i_am("eval-grades1.Rproj")
library(here)
library(vroom)
library(ggplot2)
library(dplyr)
library(tidyr)
theme_set(theme_bw())
```

## Question 1 data import
```{r}
data <- vroom(here("grades.csv"))
```
## Question 2
Give the number of grades in the data set directly in the text of your quarto file, in a sentence of the form “The data set contains xxx grades.” where xxx is replaced by the number of grades. This must be computed from the data set.
```{r}
data %>% distinct(grade)
nrow(data)
```
In total, we have 64995 grades but only 214 dinstincts.

## Question 3
The dplyr function distinct() can be used to keep only distinct (!) values in a data frame, according to the specified variables. For instance if the data frame df has a variable foo, then gives a new data frame with only the column foo and such that each value of foo appears only once. This applies to multiple variables in a similar way.
Use distinct() compute the number of students on the data set and report the value directly in the text as in the previous question.

```{r}
data %>% distinct(id) %>% nrow()
```
The number of unique student is 959.

## Question 4
Create a students data frame that contains one row per student and two variables, id and group that gives the assignment of each student to their group. Make sure that each student appears on only once in the data frame. Include a short extract of the data frame in the quarto rendering.
```{r}
students <- data %>%
  distinct(id, .keep_all = TRUE) %>% 
  select(id, group) 
head(students)
```

## Question 5
Use a graphical representation to display the number of students per group.
```{r}
students_per_group <- students %>%
  group_by(group) %>%
  summarise(num_students = n())


ggplot(students_per_group, aes(x = group, y = num_students)) +
  geom_bar(stat = "identity") +
  labs(title = "nb of student per group", x = "Group", y = "Nb of students") +
  theme_minimal()
```
## Question 6
Compute the average of all the grades in Astrology and Divination in each group and display graphically this average as a function of the group. It is recommend to use geom_col() for this task (read the documentation!).
```{r}
average_grades <- data %>%
  filter(course == "Astrology and Divination") %>%  
  group_by(group) %>%                               
  summarise(avg_grade = mean(grade, na.rm = TRUE))  

print(average_grades)
```
```{r}
ggplot(average_grades, aes(x = group, y = avg_grade)) +
  geom_col(fill = "gray") + 
  labs(title = "Average Grades by Group",
       x = "Group",
       y = "Average Grade") +
  theme_minimal()
```
## Question 7
Compare graphically the distribution of the grades of the 2 modules.
```{r}
grade_distribution <- students %>%
  group_by(course, grade) %>%
  summarise(num_students = n(), .groups = 'drop')

ggplot(grade_distribution, aes(x = grade, y = num_students, fill = course)) +
  geom_bar(stat = "identity", position = "dodge") +  
  labs(title = "Distribution of Grades",
       x = "Grades",
       y = "Number of Students") +
  theme_minimal()
```
## Question 8
Compute the number of grades per student and include in your quarto rendering an extract of the resulting data frame. Make sure to keep in the data frame the id of the students but also their group. Include in the text a markdown table with the minimum, maximum, average and median number of grades per student.
```{r}
grades_per_id <- students %>%
  group_by(id) %>%              
  summarise(num_grades = n(), .groups = 'drop')
grades_per_id
```
```{r}
sample <- grades_per_id %>% 
  slice_head(n = 10)
sample
```

```{r}
grades_per_id_group <- students %>%
  group_by(id, group) %>%              
  summarise(num_grades = n(), .groups = 'drop')  
sample_grades <- grades_per_id_group %>% 
  slice_head(n = 10)
library(knitr)
kable(sample_grades)
```

## Question 9
Create a data frame that gives for each student their id, their group and the number of grades they obtained in Architecture and Sculpture and include in the quarto rendering a small extract of the result.
```{r}
grades_architecture <- data %>%
  filter(course == "Architecture and Sculpture") %>%  # Filtrer pour le cours
  distinct(id, group, grade) %>%                       # Garder uniquement les combinaisons uniques d'ID, group et grade
  group_by(id, group) %>%                               # Regrouper par ID et groupe
  summarise(num_grades = n(), .groups = 'drop') 
grades_architecture
sample_architecture_grades <- grades_architecture %>% 
  slice_head(n = 10)
kable(sample_architecture_grades)
```





